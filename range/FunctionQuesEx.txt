FunctionQuesEx = class("FunctionQuesEx")


function FunctionQuesEx.Me(  )
	-- body
	if nil == FunctionQuesEx.me then
		FunctionQuesEx.me = FunctionQuesEx.new()
	end
	GameConfig.debugQuestTrace = true
	return FunctionQuesEx.me
end

function FunctionQuesEx:ctor()
	self.currentQuestId = nil
	TimeTickManager.Me():CreateTick(0,3000,self.Update,self)
	local eventManager = EventManager.Me()
	eventManager:AddEventListener(MyselfEvent.MissionCommandChanged,self.handleMissionCommand,self)
	self:init()
end

function FunctionQuesEx:init(  )
	-- body
	self:init_visitNpc()
	self:init_scenery()
end

function FunctionQuesEx:init_visitNpc(  )
	-- body
	for k,v in pairs(Table_Npc) do
		ServiceQuestProxy.Instance:CallVisitNpcUserCmd(k)
	end
end

function FunctionQuesEx:init_scenery(  )
	-- body
	for k,v in pairs(Table_Viewspot) do
		ServiceNUserProxy.Instance:CallSceneryUserCmd(nil, {k})
	end
end

function FunctionQuesEx:init_takePhoto(  )
	-- body
	for k,v in pairs(Table_Monster) do
		local data = ReusableTable.CreateArray()
		for i=1,#nearMonster do
			table.insert(data,k)
			-- printRed("guid----:"..nearMonster[i].id)
		end	
		if(#data > 0)then
			ServiceNUserProxy.Instance:CallCameraFocus(data)
			ReusableTable.DestroyArray(data)
		end
	end
end

function FunctionQuesEx:handleMissionCommand( note )
	-- body
	local data = note.data
	local newCmd = data[2]
	if(newCmd)then
		self.currentQuestId = newCmd.args.custom
	else
		self.currentQuestId = nil		
	end
end

function FunctionQuesEx:Update(  )
	-- body
	if(self.currentQuestId == nil)then
		
	end
end

function FunctionQuesEx:getQuest(  )
	-- body
	local questDataList = QuestProxy.Instance:getQuestListInOrder(SceneQuest_pb.EQUESTLIST_ACCEPT)

	local list = {}
	local myself = Game.Myself;
	local currentProfession = myself.data.userdata:Get(UDEnum.PROFESSION);
	local destProfession = myself.data.userdata:Get(UDEnum.DESTPROFESSION);
	if(not questDataList)then
		return 
	end
	-- printRed(#questDataList)
	for i=1,#questDataList do
		local single = questDataList[i]
		-- printRed(single.staticData)
		if(single.staticData)then		
			local isTrace = QuestProxy.Instance:isQuestTraceById(single.staticData.QuestID)
			if(single.staticData.TraceInfo ~= "" and isTrace)then
				if(single.staticData.FirstClass ~= nil)then
					if(single.staticData.FirstClass == destProfession)then
						table.insert(list,single)
					end
				elseif(QuestProxy.Instance:isQuestCanBeShowTrace(single.type))then
					table.insert(list,single)
				end
			end
		end
	end

	local traceDatas = QuestProxy.Instance:getTraceDatas()
	if(traceDatas)then
		for i=1,#traceDatas do
			local single = traceDatas[i]
			table.insert(list,single)
		end
	end
	if(#list >0)then	
		self:sortTraceDatas(list)
		return list[1]
	elseif(questDataList)then
		return questDataList[1]
	end
end

function FunctionQuesEx:sortTraceDatas( questList)
	-- body
	if(questList ~=nil and #questList ~=0 )then
		table.sort(questList,function (t1,t2)
			if(t1.type == t2.type)then
				if(t1.type == QuestDataType.QuestDataType_WANTED)then
					return t1.time > t2.time
				else
					return t1.orderId < t2.orderId	
				end			
			elseif(t1.type == QuestDataType.QuestDataType_INVADE)then
				return true
			elseif(t2.type == QuestDataType.QuestDataType_INVADE)then
				return false
			else
				if(t1.type == QuestDataType.QuestDataType_WANTED)then
					return true
				elseif(t2.type == QuestDataType.QuestDataType_WANTED)then
					return false
				elseif(t1.type == QuestDataType.QuestDataType_MAIN)then
					return true
				elseif(t2.type == QuestDataType.QuestDataType_MAIN)then
					return false
				elseif(t1.type == QuestDataType.QuestDataType_SEALTR)then
					return true
				elseif(t2.type == QuestDataType.QuestDataType_SEALTR)then
					return false
				elseif(t1.type == QuestDataType.QuestDataType_DAILY)then
					return true
				elseif(t2.type == QuestDataType.QuestDataType_DAILY)then
					return false
				elseif(t1.type == QuestDataType.QuestDataType_BRANCH)then
					return true
				elseif(t2.type == QuestDataType.QuestDataType_BRANCH)then
					return false
				else
					return t1.type == QuestDataType.QuestDataType_ITEMTR
				end
			end
		end)
	end	
end

function FunctionQuesEx:executeQuest( questData )
	-- printRed("executeQuest content:"..questData.questDataStepType)
	-- printRed("executeQuest id:"..questData.id)
	-- if(true)then
	-- 	self:test()
	-- 	return
	-- end

	local isInHand,master= Game.Myself:IsHandInHand()
	if(isInHand and not master)then
		MsgManager.ShowMsgByID(824)
		return
	end	

	local isDead = Game.Myself:IsDead()
	if(isDead and not QuestProxy.Instance:checkCanExcuteWhenDead(questData))then
		MsgManager.ShowMsgByID(2500)
		return
	end

	if(questData.questDataStepType == QuestDataStepType.QuestDataStepType_LEVEL)then
		return
	elseif(questData.questDataStepType == QuestDataStepType.QuestDataStepType_WAIT)then
		return	
	elseif(questData.questDataStepType == QuestDataStepType.QuestDataStepType_GUIDE)then
		local guideType = questData.params.type
		if(guideType == QuestDataGuideType.QuestDataGuideType_explain)then
			FunctionGuide.Me():stopGuide(  )
			GameFacade.Instance:sendNotification(UIEvent.JumpPanel,{view = PanelConfig.GuidePanel, viewdata = {questData = questData}})
		else
			FunctionGuide.Me():showGuideByQuestData(questData)
		end	
		return	
	else
		-- cmd
		if(self.cmdData and self.cmdData.id == questData.id)then
			if(self.cmdData.step == questData.step)then
				return
			end
		end

		local sameNpcVisit = self:handleVisitQuest(questData)
		if(sameNpcVisit)then
			return
		end

		TableUtility.TableClear(cmdArgs)
		cmdArgs.targetMapID = questData.map
		cmdArgs.targetPos = questData.pos
		cmdArgs.distance = questData.params.distance
		cmdArgs.customType = AccessCustomType.Quest
	 	cmdArgs.custom = questData.id
		cmdArgs.callback = function ( cmd,event )
			-- body
			self:missionCallback(cmd,event)
		end

		local cmdClass = nil
		local questStepType = questData.questDataStepType
		if(QuestDataStepType.QuestDataStepType_VISIT == questStepType)then
			cmdArgs.npcUID = questData.params.uniqueid
			if nil == cmdArgs.npcUID then
				if type(questData.params.npc) == "table" then
					cmdArgs.npcID = questData.params.npc[1]
				else
					cmdArgs.npcID = questData.params.npc
				end
			end
			cmdClass = MissionCommandVisitNpc
		elseif(QuestDataStepType.QuestDataStepType_KILL == questStepType)then
			cmdArgs.groupID = questData.params.groupId
			cmdArgs.npcID = questData.params.monster
			cmdArgs.npcUID = questData.params.uniqueid
			cmdClass = MissionCommandSkill
		elseif(QuestDataStepType.QuestDataStepType_COLLECT == questStepType)then
			cmdArgs.groupID = questData.params.groupId
			cmdArgs.npcID = questData.params.monster
			cmdArgs.skillID = GameConfig.NewRole.riskskill[1]
			cmdArgs.npcUID = questData.params.uniqueid
			cmdClass = MissionCommandSkill
		elseif(QuestDataStepType.QuestDataStepType_USE == questStepType)then
			cmdClass = MissionCommandMove
		elseif(QuestDataStepType.QuestDataStepType_SELFIE == questStepType)then
			cmdClass = MissionCommandMove
		elseif(QuestDataStepType.QuestDataStepType_GATHER == questStepType)then
			cmdArgs.npcID = questData.params.monster
			cmdArgs.groupID = questData.params.groupId
			cmdArgs.npcUID = questData.params.uniqueid
			cmdClass = MissionCommandSkill
		elseif(QuestDataStepType.QuestDataStepType_MOVE == questStepType)then	
			cmdClass = MissionCommandMove
		elseif(questData.questDataStepType == QuestDataStepType.QuestDataStepType_TALK)then
			if(cmdArgs.targetMapID == nil and cmdArgs.targetPos == nil)then
				self:executeTalkQuest(questData)
			else
				cmdClass = MissionCommandMove
				self:handleAutoTrigger(questData)
			end
		elseif(questData.questDataStepType == QuestDataStepType.QuestDataStepType_RAID)then
			-- helplog("ServiceQuestProxy.Instance:CallQuestRaidCmd",questData.id)
			if(cmdArgs.targetMapID == nil and cmdArgs.targetPos == nil)then
				ServiceQuestProxy.Instance:CallQuestRaidCmd(questData.id)
			else
				cmdClass = MissionCommandMove
				self:handleAutoTrigger(questData)
			end
		elseif(questData.questDataStepType == QuestDataStepType.QuestDataStepType_DAILY)then
			if(cmdArgs.targetMapID == nil and cmdArgs.targetPos == nil)then
				return
			else
				cmdClass = MissionCommandMove
			end
		elseif(questData.questDataStepType == QuestDataStepType.QuestDataStepType_ITEM)then
			if(cmdArgs.targetMapID == nil and cmdArgs.targetPos == nil)then
				return
			else
				local creatureId = questData.params.monster
				cmdArgs.npcID = creatureId
				cmdArgs.npcUID = questData.params.uniqueid
				if( creatureId and Table_Monster[creatureId])then
					cmdArgs.groupID = questData.params.groupId
					cmdClass = MissionCommandSkill
				elseif(creatureId and Table_Npc[creatureId])then
					cmdClass = MissionCommandVisitNpc
				end
			end
		elseif(questData.questDataStepType == QuestDataStepType.QuestDataStepType_SEAL)then
			if(cmdArgs.targetMapID == nil and cmdArgs.targetPos == nil)then
				return
			else
				cmdArgs.npcUID = questData.params.uniqueid
				if nil == cmdArgs.npcUID then
					if type(questData.params.npc) == "table" then
						cmdArgs.npcID = questData.params.npc[1]
					else
						cmdArgs.npcID = questData.params.npc
					end
				end
				cmdClass = MissionCommandVisitNpc
			end
		elseif(questData.questDataStepType == QuestDataStepType.QuestDataStepType_GUIDELOCKMONSTER)then
			self:handleAutoTrigger(questData)
			cmdClass = MissionCommandMove
		end

		if nil ~= cmdClass then
			-- :clonePartData()
			local cmd = MissionCommandFactory.CreateCommand(cmdArgs, cmdClass)	
			Game.Myself:Client_SetMissionCommand(cmd)
		end

		TableUtility.TableClear(cmdArgs)
	end	
end
